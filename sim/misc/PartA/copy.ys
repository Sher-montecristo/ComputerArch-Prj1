# 518030910211 ZiqiZhao
# 518030910188 Yimin Zhao

# Set up stack
    .pos    0
    irmovl  stack, %esp
    rrmovl  %esp, %ebp
    irmovl  $3, %eax
    pushl   %eax
    irmovl  src, %eax
    pushl   %eax
    irmovl  dest, %eax
    pushl   %eax
    call    copy_block
    halt
.align 4
# Source block
src:
    .long 0x00a
    .long 0x0b0
    .long 0xc00

# Destination block
dest:
    .long 0x111
    .long 0x222
    .long 0x333

copy_block:
    pushl   %ebp
    rrmovl  %esp, %ebp
    pushl   %ecx
    pushl   %edx
    pushl   %edi
    irmovl  $0, %eax         # %eax = result = 0
    mrmovl  16(%ebp), %ecx   # %ecx = len
    mrmovl  12(%ebp), %edx   # %edx = src
    mrmovl  8(%ebp), %edi    # %edi = dest
    jmp     while_loop

while_loop:
    andl    %ecx, %ecx       # check if %ecx == 0?
    jle     return           # if so, jump to "return"
    mrmovl  (%edx), %esi     # %esi = val = *src
    irmovl  $4, %ebx         # %ebx = 4
    addl    %ebx, %edx       # src++
    rmmovl  %esi, (%edi)     # *dest = val
    addl    %ebx, %edi       # dest++
    xorl    %esi, %eax
    irmovl  $-1, %ebx
    addl    %ebx, %ecx       # len--
    jmp     while_loop

return:
    popl    %edi
    popl    %edx
    popl    %ecx
    rrmovl  %ebp, %esp
    popl    %ebp
    ret
# Stack 
    .pos    0x400
stack:
