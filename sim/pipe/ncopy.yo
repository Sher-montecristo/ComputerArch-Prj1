                      | #/* $begin ncopy-ys */
                      | 
                      | # Bugen's note: to evalute this program, run:
                      | #  > make psim  [if necessary]
                      | #  > ../misc/yas ncopy.ys
                      | #  > ./check-len.pl < ncopy.yo
                      | #  > ./correctness.pl -p
                      | #  > ./benchmark.pl
                      | 
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | # 518030910211, ZiqiZhao
                      | # Describe how and why you modified the baseline code.
                      | # - Avoid "load and use":
                      | #   For the pipeline design in CS:APP 2e, "load and use" or "mrmovl" then "rmmovl" will lead to penalty,
                      | #  which must be avoided to improve the performance. On the one hand, we rearranged the order of
                      | #  instructions to avoid stalling as much as possible. On the other hand, we use two registers to store
                      | #  the variable "val" , loading them separately and ahead of time.
                      | # - Loop unrolling:
                      | #   There's much overhead in testing and updating procedure of loops, and one way to minimize it is to
                      | #  perform a technique named "loop unrolling". That is, we do multiple loops and update the relevant 
                      | #  data at once, to reduce the number of times we execute the 'add' and 'jxx' instructions. 
                      | # - Search tree for remaining elements:
                      | #   For large inputs, the more ways we unroll the loops, the better the program performs. However, for 
                      | #  small inputs, it is important to choose a good method to process the remaining elements. The simplest
                      | #  way is to write another loop for them, but a much better way is to totally unroll the code, that is,
                      | #  jump to different position for different number of remaining ones. Since Y86 does not support relative
                      | #  jump instruction, we designed a search tree to get the correct jump destination for each possibility.
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x000: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x002: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x004: a06f         | 	pushl %esi		# Save callee-save regs
  0x006: a03f         | 	pushl %ebx
  0x008: a07f         | 	pushl %edi
  0x00a: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x010: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x016: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 
                      | # Bugen: Entry
  0x01c: 6300         | 	xorl %eax, %eax		# count = 0
  0x01e: c0f2f7ffffff | 	iaddl $-9, %edx		# len -= 9, i.e., initial_len <= 9?
  0x024: 713a010000   | 	jle Remaining		# if so, goto Remaining
                      | 
                      | # Bugen: Loop unrolling part
  0x029:              | Loop0:	
  0x029: 506300000000 | 	mrmovl (%ebx), %esi	# valA = src[0]
  0x02f: 507304000000 | 	mrmovl 4(%ebx), %edi	# valB = src[1]
  0x035: 406100000000 | 	rmmovl %esi, (%ecx)	# dst[0] = valA
  0x03b: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x03d: 7148000000   | 	jle Loop1		# if so, goto next loop
  0x042: c0f001000000 | 	iaddl $1, %eax		# count++
  0x048:              | Loop1:	
  0x048: 506308000000 | 	mrmovl 8(%ebx), %esi	# valA = src[2]
  0x04e: 407104000000 | 	rmmovl %edi, 4(%ecx)	# dst[1] = valB
  0x054: 6277         | 	andl %edi, %edi		# valB <= 0?
  0x056: 7161000000   | 	jle Loop2		# if so, goto next loop
  0x05b: c0f001000000 | 	iaddl $1, %eax		# count++
  0x061:              | Loop2:
  0x061: 50730c000000 | 	mrmovl 12(%ebx), %edi	# valB = src[3]
  0x067: 406108000000 | 	rmmovl %esi, 8(%ecx)	# dst[2] = valA
  0x06d: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x06f: 717a000000   | 	jle Loop3		# if so, goto next loop
  0x074: c0f001000000 | 	iaddl $1, %eax		# count++
  0x07a:              | Loop3:	
  0x07a: 506310000000 | 	mrmovl 16(%ebx), %esi	# valA = src[4]
  0x080: 40710c000000 | 	rmmovl %edi, 12(%ecx)	# dst[3] = valB
  0x086: 6277         | 	andl %edi, %edi		# valB <= 0?
  0x088: 7193000000   | 	jle Loop4		# if so, goto next loop
  0x08d: c0f001000000 | 	iaddl $1, %eax		# count++
  0x093:              | Loop4:
  0x093: 507314000000 | 	mrmovl 20(%ebx), %edi	# valB = src[5]
  0x099: 406110000000 | 	rmmovl %esi, 16(%ecx)	# dst[4] = valA
  0x09f: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x0a1: 71ac000000   | 	jle Loop5		# if so, goto next loop
  0x0a6: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0ac:              | Loop5:	
  0x0ac: 506318000000 | 	mrmovl 24(%ebx), %esi	# valA = src[6]
  0x0b2: 407114000000 | 	rmmovl %edi, 20(%ecx)	# dst[5] = valB
  0x0b8: 6277         | 	andl %edi, %edi		# valB <= 0?
  0x0ba: 71c5000000   | 	jle Loop6		# if so, goto next loop
  0x0bf: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0c5:              | Loop6:
  0x0c5: 50731c000000 | 	mrmovl 28(%ebx), %edi	# valB = src[7]
  0x0cb: 406118000000 | 	rmmovl %esi, 24(%ecx)	# dst[6] = valA
  0x0d1: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x0d3: 71de000000   | 	jle Loop7		# if so, goto next loop
  0x0d8: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0de:              | Loop7:	
  0x0de: 506320000000 | 	mrmovl 32(%ebx), %esi	# valA = src[8]
  0x0e4: 40711c000000 | 	rmmovl %edi, 28(%ecx)	# dst[7] = valB
  0x0ea: 6277         | 	andl %edi, %edi		# valB <= 0?
  0x0ec: 71f7000000   | 	jle Loop8		# if so, goto next loop
  0x0f1: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0f7:              | Loop8:
  0x0f7: 507324000000 | 	mrmovl 36(%ebx), %edi	# valB = src[9]
  0x0fd: 406120000000 | 	rmmovl %esi, 32(%ecx)	# dst[8] = valA
  0x103: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x105: 7110010000   | 	jle Loop9		# if so, goto next loop
  0x10a: c0f001000000 | 	iaddl $1, %eax		# count++
  0x110:              | Loop9:
  0x110: 407124000000 | 	rmmovl %edi, 36(%ecx)	# dst[9] = valB
  0x116: 6277         | 	andl %edi, %edi		# valB <= 0?
  0x118: 7123010000   | 	jle LoopEnd		# if so, goto loop end
  0x11d: c0f001000000 | 	iaddl $1, %eax
  0x123:              | LoopEnd:
  0x123: c0f128000000 | 	iaddl $40, %ecx		# dst += 10 * 4
  0x129: c0f328000000 | 	iaddl $40, %ebx		# src += 10 * 4
  0x12f: c0f2f6ffffff | 	iaddl $-10, %edx	# len -= 10
  0x135: 7629000000   | 	jg Loop0		# if so, goto Loop0
                      | 				# else, goto process remaining elements
                      | 
                      | # Bugen: Remaining part
  0x13a:              | Remaining:
  0x13a: 6366         | 	xorl %esi, %esi
  0x13c:              | RemTest:
  0x13c: c0f206000000 | 	iaddl $6, %edx		# [-9,0] -> [-3,6]	(+3)
  0x142: 7251010000   | 	jl RemTestL
  0x147: 7666010000   | 	jg RemTestR
  0x14c: 701f020000   | 	jmp Rem3
  0x151:              | RemTestL:
  0x151: c0f202000000 | 	iaddl $2, %edx		# [-3,-1] -> [-1,1]	(+1)
  0x157: 7351020000   | 	je Rem1
  0x15c: 7638020000   | 	jg Rem2
  0x161: 7077020000   | 	jmp Done		# -1 + 1 = 0
  0x166:              | RemTestR:
  0x166: c0f2fdffffff | 	iaddl $-3, %edx		# [1,6] -> [-2,3]	(+6)
  0x16c: 7686010000   | 	jg RemTestRR
  0x171: 73d4010000   | 	je Rem6
                      | 	# jmp RemTestRL
  0x176:              | RemTestRL:
  0x176: c0f201000000 | 	iaddl $1, %edx		# [-2,-1] -> [-1,0]	(+5)
  0x17c: 7206020000   | 	jl Rem4
  0x181: 73ed010000   | 	je Rem5
                      | 	# jmp RemTestRR
  0x186:              | RemTestRR:
  0x186: c0f2feffffff | 	iaddl $-2, %edx		# [1,3] -> [-1,1]	(+8)
  0x18c: 72bb010000   | 	jl Rem7
  0x191: 73a2010000   | 	je Rem8
                      | 	# jmp Rem9
                      | 
  0x196:              | Rem9:
  0x196: 506320000000 | 	mrmovl 32(%ebx), %esi	# valA = src[8]
  0x19c: 406120000000 | 	rmmovl %esi, 32(%ecx)	# dst[8] = valA
  0x1a2:              | Rem8:	# Note that %esi == 0, directly jumping here
                      | 	#  implies that RemXb will performs correctly.
  0x1a2: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x1a4: 50631c000000 | 	mrmovl 28(%ebx), %esi	# valA = src[7]
  0x1aa: 71b5010000   | 	jle Rem8b		# if so, goto Rem8b
  0x1af: c0f001000000 | 	iaddl $1, %eax		# count++
  0x1b5: 40611c000000 | Rem8b:	rmmovl %esi, 28(%ecx)	# dst[7] = valA
  0x1bb:              | Rem7:	
  0x1bb: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x1bd: 506318000000 | 	mrmovl 24(%ebx), %esi	# valA = src[6]
  0x1c3: 71ce010000   | 	jle Rem7b		# if so, goto Rem7b
  0x1c8: c0f001000000 | 	iaddl $1, %eax		# count++
  0x1ce: 406118000000 | Rem7b:	rmmovl %esi, 24(%ecx)	# dst[6] = valA
  0x1d4:              | Rem6:	
  0x1d4: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x1d6: 506314000000 | 	mrmovl 20(%ebx), %esi	# valA = src[5]
  0x1dc: 71e7010000   | 	jle Rem6b		# if so, goto Rem6b
  0x1e1: c0f001000000 | 	iaddl $1, %eax		# count++
  0x1e7: 406114000000 | Rem6b:	rmmovl %esi, 20(%ecx)	# dst[5] = valA
  0x1ed:              | Rem5:	
  0x1ed: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x1ef: 506310000000 | 	mrmovl 16(%ebx), %esi	# valA = src[4]
  0x1f5: 7100020000   | 	jle Rem5b		# if so, goto Rem5b
  0x1fa: c0f001000000 | 	iaddl $1, %eax		# count++
  0x200: 406110000000 | Rem5b:	rmmovl %esi, 16(%ecx)	# dst[4] = valA
  0x206:              | Rem4:	
  0x206: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x208: 50630c000000 | 	mrmovl 12(%ebx), %esi	# valA = src[3]
  0x20e: 7119020000   | 	jle Rem4b		# if so, goto Rem4b
  0x213: c0f001000000 | 	iaddl $1, %eax		# count++
  0x219: 40610c000000 | Rem4b:	rmmovl %esi, 12(%ecx)	# dst[3] = valA
  0x21f:              | Rem3:	
  0x21f: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x221: 506308000000 | 	mrmovl 8(%ebx), %esi	# valA = src[2]
  0x227: 7132020000   | 	jle Rem3b		# if so, goto Rem3b
  0x22c: c0f001000000 | 	iaddl $1, %eax		# count++
  0x232: 406108000000 | Rem3b:	rmmovl %esi, 8(%ecx)	# dst[2] = valA
  0x238:              | Rem2:	
  0x238: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x23a: 506304000000 | 	mrmovl 4(%ebx), %esi	# valA = src[1]
  0x240: 714b020000   | 	jle Rem2b		# if so, goto Rem2b
  0x245: c0f001000000 | 	iaddl $1, %eax		# count++
  0x24b: 406104000000 | Rem2b:	rmmovl %esi, 4(%ecx)	# dst[1] = valA
  0x251:              | Rem1:	
  0x251: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x253: 506300000000 | 	mrmovl (%ebx), %esi	# valA = src[0]
  0x259: 7164020000   | 	jle Rem1b		# if so, goto Rem1b
  0x25e: c0f001000000 | 	iaddl $1, %eax		# count++
  0x264: 406100000000 | Rem1b:	rmmovl %esi, (%ecx)	# dst[0] = valA
  0x26a: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x26c: 7177020000   | 	jle Done		# if so, goto Done
  0x271: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
                      | # Remaining:
                      | # 	iaddl $9, %edx		# restore real len
                      | # 	jmp RemTest		# goto RemTest
                      | # RemLoop:
                      | # 	mrmovl (%ebx), %esi	# valA = *src
                      | # 	iaddl $-1, %edx		# len -= 1
                      | # 	iaddl $4, %ebx		# src += 1
                      | # 	rmmovl %esi, (%ecx)	# *dst = valA
                      | # 	iaddl $4, %ecx		# dst += 1
                      | # 	andl %esi, %esi		# valA <= 0?
                      | # 	jle RemTest		# if so, goto RemTest
                      | # 	iaddl $1, %eax		# count++
                      | # RemTest:
                      | # 	andl %edx, %edx		# len > 0?
                      | # 	jg RemLoop		# if so, goto RemLoop
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x277:              | Done:
  0x277: b07f         | 	popl %edi               # Restore callee-save registers
  0x279: b03f         | 	popl %ebx
  0x27b: b06f         | 	popl %esi
  0x27d: 2054         | 	rrmovl %ebp, %esp
  0x27f: b05f         | 	popl %ebp
  0x281: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x282:              | End:
                      | #/* $end ncopy-ys */
