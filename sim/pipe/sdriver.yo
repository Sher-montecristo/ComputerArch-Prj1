                      | #######################################################################
                      | # Test for copying block of size 4;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f428030000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f528030000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f004000000 | 	irmovl $4, %eax		# src and dst have 4 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f0d4020000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f0b0020000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | 
                      | # Bugen's note: to evalute this program, run:
                      | #  > make psim  [if necessary]
                      | #  > ../misc/yas ncopy.ys
                      | #  > ./check-len.pl < ncopy.yo
                      | #  > ./correctness.pl -p
                      | #  > ./benchmark.pl
                      | 
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | # 518030910211, ZiqiZhao
                      | # Describe how and why you modified the baseline code.
                      | # - Avoid "load and use":
                      | #   For the pipeline design in CS:APP 2e, "load and use" or "mrmovl" then "rmmovl" will cause penalty,
                      | #	which must be avoided to improve the performance. On the one hand, we rearranged the order of
                      | #	instructions to avoid stalling as much as possible. On the other hand, we use two registers to store
                      | #	the variable "val" , loading them separately and ahead of time.
                      | # - 10-way Loop Unrolling:
                      | #	There's much overhead in testing and updating procedure of loops, and one way to minimize it is to
                      | #	perform a technique named "loop unrolling". That is, we do multiple loops and update the relevant 
                      | #	data at once, to reduce the number of times we execute the 'add' and 'jxx' instructions. 
                      | # - Search Tree for Remaining Elements:
                      | #   For large inputs, the more ways we unroll the loops, the better the program performs. However, for 
                      | #	small inputs, it is important to choose a good method to process the remaining elements. The simplest
                      | #  	way is to write another loop for them, but a much better way is to totally unroll the code, that is,
                      | #  	jump to different position for different number of remaining ones. Since Y86 does not support relative
                      | #  	jump instruction, we designed a search tree to get the correct jump destination for each possibility.
                      | # - Optimized for Our Branch Prediction Design  [see also: pipe-zzcc.hcl]
                      | #   For this program, a significant performance factor is the branch prediction failure for count++. In 
                      | #  	"pipe-zzcc.hcl", we made a special optimization for the situation like this:
                      | #   Instruction:   any    non-alu    jxx
                      | #   Stage:         EX       ID       IF
                      | #   Note that in this case, we can forward the conditions from EX stage to IF and predict the branch with
                      | #  	100% accuracy. Thus, we optimized the program to ensure that there were as many of these patterns as
                      | #  	possible and took much advantage of it, which leads to an average CPE of 7.79.
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 
                      | # Entry
  0x046: c0f2f7ffffff | 	iaddl $-9, %edx		# len -= 9, i.e., initial_len <= 9?
  0x04c: 30f000000000 | 	irmovl $0, %eax		# count = 0
  0x052: 7168010000   | 	jle Remaining		# if so, goto Remaining
                      | 
                      | # Loop unrolling part
  0x057:              | Loop0:	
  0x057: 506300000000 | 	mrmovl (%ebx), %esi	# valA = src[0]
  0x05d: 507304000000 | 	mrmovl 4(%ebx), %edi	# valB = src[1]
  0x063: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x065: 406100000000 | 	rmmovl %esi, (%ecx)	# dst[0] = valA
  0x06b: 7176000000   | 	jle Loop1		# if so, goto next loop
  0x070: c0f001000000 | 	iaddl $1, %eax		# count++
  0x076:              | Loop1:	
  0x076: 506308000000 | 	mrmovl 8(%ebx), %esi	# valA = src[2]
  0x07c: 6277         | 	andl %edi, %edi		# valB <= 0?
  0x07e: 407104000000 | 	rmmovl %edi, 4(%ecx)	# dst[1] = valB
  0x084: 718f000000   | 	jle Loop2		# if so, goto next loop
  0x089: c0f001000000 | 	iaddl $1, %eax		# count++
  0x08f:              | Loop2:
  0x08f: 50730c000000 | 	mrmovl 12(%ebx), %edi	# valB = src[3]
  0x095: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x097: 406108000000 | 	rmmovl %esi, 8(%ecx)	# dst[2] = valA
  0x09d: 71a8000000   | 	jle Loop3		# if so, goto next loop
  0x0a2: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0a8:              | Loop3:	
  0x0a8: 506310000000 | 	mrmovl 16(%ebx), %esi	# valA = src[4]
  0x0ae: 6277         | 	andl %edi, %edi		# valB <= 0?
  0x0b0: 40710c000000 | 	rmmovl %edi, 12(%ecx)	# dst[3] = valB
  0x0b6: 71c1000000   | 	jle Loop4		# if so, goto next loop
  0x0bb: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0c1:              | Loop4:
  0x0c1: 507314000000 | 	mrmovl 20(%ebx), %edi	# valB = src[5]
  0x0c7: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x0c9: 406110000000 | 	rmmovl %esi, 16(%ecx)	# dst[4] = valA
  0x0cf: 71da000000   | 	jle Loop5		# if so, goto next loop
  0x0d4: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0da:              | Loop5:	
  0x0da: 506318000000 | 	mrmovl 24(%ebx), %esi	# valA = src[6]
  0x0e0: 6277         | 	andl %edi, %edi		# valB <= 0?
  0x0e2: 407114000000 | 	rmmovl %edi, 20(%ecx)	# dst[5] = valB
  0x0e8: 71f3000000   | 	jle Loop6		# if so, goto next loop
  0x0ed: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0f3:              | Loop6:
  0x0f3: 50731c000000 | 	mrmovl 28(%ebx), %edi	# valB = src[7]
  0x0f9: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x0fb: 406118000000 | 	rmmovl %esi, 24(%ecx)	# dst[6] = valA
  0x101: 710c010000   | 	jle Loop7		# if so, goto next loop
  0x106: c0f001000000 | 	iaddl $1, %eax		# count++
  0x10c:              | Loop7:	
  0x10c: 506320000000 | 	mrmovl 32(%ebx), %esi	# valA = src[8]
  0x112: 6277         | 	andl %edi, %edi		# valB <= 0?
  0x114: 40711c000000 | 	rmmovl %edi, 28(%ecx)	# dst[7] = valB
  0x11a: 7125010000   | 	jle Loop8		# if so, goto next loop
  0x11f: c0f001000000 | 	iaddl $1, %eax		# count++
  0x125:              | Loop8:
  0x125: 507324000000 | 	mrmovl 36(%ebx), %edi	# valB = src[9]
  0x12b: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x12d: 406120000000 | 	rmmovl %esi, 32(%ecx)	# dst[8] = valA
  0x133: 713e010000   | 	jle Loop9		# if so, goto next loop
  0x138: c0f001000000 | 	iaddl $1, %eax		# count++
  0x13e:              | Loop9:
  0x13e: 6277         | 	andl %edi, %edi		# valB <= 0?
  0x140: 407124000000 | 	rmmovl %edi, 36(%ecx)	# dst[9] = valB
  0x146: 7151010000   | 	jle LoopEnd		# if so, goto loop end
  0x14b: c0f001000000 | 	iaddl $1, %eax
  0x151:              | LoopEnd:
  0x151: c0f128000000 | 	iaddl $40, %ecx		# dst += 10 * 4
  0x157: c0f328000000 | 	iaddl $40, %ebx		# src += 10 * 4
  0x15d: c0f2f6ffffff | 	iaddl $-10, %edx	# len -= 10
  0x163: 7657000000   | 	jg Loop0		# if so, goto Loop0
                      | 				# else, goto process remaining elements
                      | 
                      | # The following block is a binary search tree to 
                      | # find the number of remaining loops (which must be less than 10) at minimal cost
  0x168:              | Remaining:
  0x168: c0f206000000 | 	iaddl $6, %edx		# [-9,0] -> [-3,6]	(+3)
  0x16e:              | RemTest:
  0x16e: 30f600000000 | 	irmovl $0, %esi
  0x174: 7693010000   | 	jg RemTestR
  0x179: 734c020000   | 	je Rem3
  0x17e:              | RemTestL:
  0x17e: c0f202000000 | 	iaddl $2, %edx		# [-3,-1] -> [-1,1]	(+1)
  0x184: 737e020000   | 	je Rem1
  0x189: 7665020000   | 	jg Rem2
  0x18e: 70a4020000   | 	jmp Done		# -1 + 1 = 0
  0x193:              | RemTestR:
  0x193: c0f2fdffffff | 	iaddl $-3, %edx		# [1,6] -> [-2,3]	(+6)
  0x199: 76b3010000   | 	jg RemTestRR
  0x19e: 7301020000   | 	je Rem6
  0x1a3:              | RemTestRL:
  0x1a3: c0f201000000 | 	iaddl $1, %edx		# [-2,-1] -> [-1,0]	(+5)
  0x1a9: 7233020000   | 	jl Rem4
  0x1ae: 731a020000   | 	je Rem5
  0x1b3:              | RemTestRR:
  0x1b3: c0f2feffffff | 	iaddl $-2, %edx		# [1,3] -> [-1,1]	(+8)
  0x1b9: 72e8010000   | 	jl Rem7
  0x1be: 73cf010000   | 	je Rem8
                      | 
  0x1c3:              | Rem9:
  0x1c3: 506320000000 | 	mrmovl 32(%ebx), %esi	# valA = src[8]
  0x1c9: 406120000000 | 	rmmovl %esi, 32(%ecx)	# dst[8] = valA
  0x1cf:              | Rem8:	# Note that %esi == 0, directly jumping here
                      | 	#  implies that RemXb will performs correctly.
  0x1cf: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x1d1: 50631c000000 | 	mrmovl 28(%ebx), %esi	# valA = src[7]
  0x1d7: 71e2010000   | 	jle Rem8b		# if so, goto Rem8b
  0x1dc: c0f001000000 | 	iaddl $1, %eax		# count++
  0x1e2: 40611c000000 | Rem8b:	rmmovl %esi, 28(%ecx)	# dst[7] = valA
  0x1e8:              | Rem7:	
  0x1e8: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x1ea: 506318000000 | 	mrmovl 24(%ebx), %esi	# valA = src[6]
  0x1f0: 71fb010000   | 	jle Rem7b		# if so, goto Rem7b
  0x1f5: c0f001000000 | 	iaddl $1, %eax		# count++
  0x1fb: 406118000000 | Rem7b:	rmmovl %esi, 24(%ecx)	# dst[6] = valA
  0x201:              | Rem6:	
  0x201: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x203: 506314000000 | 	mrmovl 20(%ebx), %esi	# valA = src[5]
  0x209: 7114020000   | 	jle Rem6b		# if so, goto Rem6b
  0x20e: c0f001000000 | 	iaddl $1, %eax		# count++
  0x214: 406114000000 | Rem6b:	rmmovl %esi, 20(%ecx)	# dst[5] = valA
  0x21a:              | Rem5:	
  0x21a: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x21c: 506310000000 | 	mrmovl 16(%ebx), %esi	# valA = src[4]
  0x222: 712d020000   | 	jle Rem5b		# if so, goto Rem5b
  0x227: c0f001000000 | 	iaddl $1, %eax		# count++
  0x22d: 406110000000 | Rem5b:	rmmovl %esi, 16(%ecx)	# dst[4] = valA
  0x233:              | Rem4:	
  0x233: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x235: 50630c000000 | 	mrmovl 12(%ebx), %esi	# valA = src[3]
  0x23b: 7146020000   | 	jle Rem4b		# if so, goto Rem4b
  0x240: c0f001000000 | 	iaddl $1, %eax		# count++
  0x246: 40610c000000 | Rem4b:	rmmovl %esi, 12(%ecx)	# dst[3] = valA
  0x24c:              | Rem3:	
  0x24c: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x24e: 506308000000 | 	mrmovl 8(%ebx), %esi	# valA = src[2]
  0x254: 715f020000   | 	jle Rem3b		# if so, goto Rem3b
  0x259: c0f001000000 | 	iaddl $1, %eax		# count++
  0x25f: 406108000000 | Rem3b:	rmmovl %esi, 8(%ecx)	# dst[2] = valA
  0x265:              | Rem2:	
  0x265: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x267: 506304000000 | 	mrmovl 4(%ebx), %esi	# valA = src[1]
  0x26d: 7178020000   | 	jle Rem2b		# if so, goto Rem2b
  0x272: c0f001000000 | 	iaddl $1, %eax		# count++
  0x278: 406104000000 | Rem2b:	rmmovl %esi, 4(%ecx)	# dst[1] = valA
  0x27e:              | Rem1:	
  0x27e: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x280: 506300000000 | 	mrmovl (%ebx), %esi	# valA = src[0]
  0x286: 7191020000   | 	jle Rem1b		# if so, goto Rem1b
  0x28b: c0f001000000 | 	iaddl $1, %eax		# count++
  0x291:              | Rem1b:	
  0x291: 6266         | 	andl %esi, %esi		# valA <= 0?
  0x293: 406100000000 | 	rmmovl %esi, (%ecx)	# dst[0] = valA
  0x299: 71a4020000   | 	jle Done		# if so, goto Done
  0x29e: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
                      | # Remaining:
                      | # 	iaddl $9, %edx		# restore real len
                      | # 	jmp RemTest		# goto RemTest
                      | # RemLoop:
                      | # 	mrmovl (%ebx), %esi	# valA = *src
                      | # 	iaddl $-1, %edx		# len -= 1
                      | # 	iaddl $4, %ebx		# src += 1
                      | # 	rmmovl %esi, (%ecx)	# *dst = valA
                      | # 	iaddl $4, %ecx		# dst += 1
                      | # 	andl %esi, %esi		# valA <= 0?
                      | # 	jle RemTest		# if so, goto RemTest
                      | # 	iaddl $1, %eax		# count++
                      | # RemTest:
                      | # 	andl %edx, %edx		# len > 0?
                      | # 	jg RemLoop		# if so, goto RemLoop
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x2a4:              | Done:
  0x2a4: b07f         | 	popl %edi               # Restore callee-save registers
  0x2a6: b03f         | 	popl %ebx
  0x2a8: b06f         | 	popl %esi
  0x2aa: 2054         | 	rrmovl %ebp, %esp
  0x2ac: b05f         | 	popl %ebp
  0x2ae: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x2af:              | End:
                      | #/* $end ncopy-ys */
  0x2af:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x2b0:              | 	.align 4
  0x2b0:              | src:
  0x2b0: ffffffff     | 	.long -1
  0x2b4: feffffff     | 	.long -2
  0x2b8: 03000000     | 	.long 3
  0x2bc: 04000000     | 	.long 4
  0x2c0: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x2d0:              | 	.align 16
  0x2d0:              | Predest:
  0x2d0: fadebc00     | 	.long 0xbcdefa
  0x2d4:              | dest:
  0x2d4: abefcd00     | 	.long 0xcdefab
  0x2d8: abefcd00     | 	.long 0xcdefab
  0x2dc: abefcd00     | 	.long 0xcdefab
  0x2e0: abefcd00     | 	.long 0xcdefab
  0x2e4:              | Postdest:
  0x2e4: bcfade00     | 	.long 0xdefabc
                      | 
  0x2e8:              | .align 4
                      | # Run time stack
  0x2e8: 00000000     | 	.long 0
  0x2ec: 00000000     | 	.long 0
  0x2f0: 00000000     | 	.long 0
  0x2f4: 00000000     | 	.long 0
  0x2f8: 00000000     | 	.long 0
  0x2fc: 00000000     | 	.long 0
  0x300: 00000000     | 	.long 0
  0x304: 00000000     | 	.long 0
  0x308: 00000000     | 	.long 0
  0x30c: 00000000     | 	.long 0
  0x310: 00000000     | 	.long 0
  0x314: 00000000     | 	.long 0
  0x318: 00000000     | 	.long 0
  0x31c: 00000000     | 	.long 0
  0x320: 00000000     | 	.long 0
  0x324: 00000000     | 	.long 0
                      | 
  0x328:              | Stack:
